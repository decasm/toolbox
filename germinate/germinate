#!/usr/bin/perl -w
# Begin germinate
######## 
#$# title: germinate
#$# creator: Devon Smith
#%# email: decasm@gmail.com
#$# description: Print to STDOUT a processed template file.
#__# The kind of template is determined by the argument to '-g'.
######## 

use Date::Format;
use Template;
use YAML qw(LoadFile Dump);
use Getopt::Std;
use File::Spec;
use strict;

my %opts;
getopt("yls:f:c:o:", \%opts);
&usage('exit') unless %opts;

our $ConfDir = $ENV{XDG_CONFIG_HOME}
	? "$ENV{XDG_CONFIG_HOME}/germinate"
	: "$ENV{HOME}/.config/germinate";
our $DefaultConfig = 'config.yaml';
our @SeedDirectories = ('/usr/share/germinate/seeds', "$ConfDir/seeds");

my $tt = new Template ({ TAG_STYLE => 'star', INCLUDE_PATH => \@SeedDirectories, ABSOLUTE => 1 });

&list(\%opts) and exit if exists $opts{l} or exists $opts{y};
&usage('exit') unless defined $opts{s} or defined $opts{f};

# Source file for replacement values
my $conf = "$ConfDir/$DefaultConfig";
$conf = $opts{c} if $opts{c};

# Get the replacement value hash
my $data = &getReplacementValues($conf);
$data->{DATE} = ctime(time) and chomp($data->{DATE}) unless $data->{DATE};

my $fh = \*STDOUT;
if ( defined $opts{o} ) {
	# If an output file is specified, add file name and extension to replacement hash
	open $fh, '>', "$opts{o}" or die "Can't open output file '$opts{o}':\$n$!";
	my ($name, $ext);
	$data->{FILE} = $opts{o};
	$data->{EXT} = rindex ($opts{o}, '.') > 0 
		? substr $opts{o}, rindex ($opts{o}, '.') + 1
		: '';
}

if ( defined $opts{s} ) {
	my $seed = $opts{s};
	if ( grep { -f "$_/$seed" } @SeedDirectories ) {
		$tt->process($seed, $data, $fh) or die $tt->error();
	}
	else {
		print "Seed - \"$opts{s}\" - not available\n";
	}
}
elsif ( defined $opts{f} ) {
	my $file = $opts{f};

	if ( ! File::Spec->file_name_is_absolute($file) ) {
		$file = File::Spec->canonpath("$ENV{PWD}/$file");
	}
	if ( -f $file ) {
		$tt->process($file, $data, $fh) or die $tt->error();
	}
	else {
		print "Seed file - \"$file\" - not a file\n";
	}
}
close $fh if defined $opts{o};


# Get template replacement values from config file
sub getReplacementValues {
	my $file = shift;
	my $repl = -f $file ? LoadFile($file) : {};
	# Process command-line KEY=VALUE pairs - take precedent over configured pairs
	for ( @ARGV ) {
		next unless /=/;
		my ($k, $v) = split /=/;
		$repl->{$k} = $v;
	}
	return $repl;
}

# List available templates
sub list {
	my $opts = shift;
	my %list;
	for my $dir (@SeedDirectories) {
		next unless -d $dir;
		opendir DIR, $dir;
		map { -f "$dir/$_" && push @{ $list{$_} }, $dir } grep { $_ !~ /^\.{1,2}/;} readdir DIR;
		closedir DIR;
	}
	my @list = sort keys %list;
	if ( exists $opts{y} ) {
		print Dump(\@list);
	}
	else {
		map { print "$_\n" } @list;
	}
	1; # return 1 so that "&list and exit" (above) will work correctly.
}

# Print usage message
sub usage {
	(my $bin = $0) =~ s,^.*/,,;
	print "Usage:\t$bin [ -l | -y ] | [ -s seed | -f file ] [ KEY=VALUE ]* [ -o output-file ] [ -c config-file ]
\t-l: list available seeds 
\t-y: list available seeds as YAML
\t-s: seed to germinate
\t-f: seed file
\t-o: output file (Default: STDOUT)
\t-c: configuration file (Default: \$XDG_CONFIG_HOME/germinate/config.yaml)
\tKEY=VALUE: Used while processing a seed
\t         : These overwrite keys listed in config file
\t         : The date of germination is always available in the DATE key.
";
	exit if shift eq 'exit';
}

######## 
# End germinate
# vim:ts=4:indentexpr=
